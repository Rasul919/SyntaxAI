import logging
import asyncio
import nest_asyncio
import json
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode


nest_asyncio.apply()


TELEGRAM_TOKEN = "7487815969:AAFOM9A9ObYv2pWaPReeMVqrLMkL7pvZA4w" 
OPENROUTER_API_KEY = "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"  
CHANNEL_USERNAME = "@SYNTAXA1" 


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.message.from_user.id
    is_subscribed = await check_subscription(user_id, context)

    menu_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("/start"), KeyboardButton("/newchat")]],
        resize_keyboard=True
    )

    if is_subscribed:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–≤–æ–µ–º —Ç–µ–∫—Å—Ç–µ. "
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –∏—Å–ø—Ä–∞–≤–ª—é –µ–≥–æ. ‚úçÔ∏è",
            reply_markup=menu_keyboard
        )
    else:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–≤–æ–µ–º —Ç–µ–∫—Å—Ç–µ. "
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –∏—Å–ø—Ä–∞–≤–ª—é –µ–≥–æ. ‚úçÔ∏è\n\n"
            "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. üëá"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/SYNTAXA1")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])

        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)


async def new_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newchat: –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç."""
    menu_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("/start"), KeyboardButton("/newchat")]],
        resize_keyboard=True
    )

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–≤–æ–µ–º —Ç–µ–∫—Å—Ç–µ. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∞ —è –∏—Å–ø—Ä–∞–≤–ª—é –µ–≥–æ. ‚úçÔ∏è",
        reply_markup=menu_keyboard
    )


async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."""
    query = update.callback_query
    user_id = query.from_user.id
    is_subscribed = await check_subscription(user_id, context)

    if is_subscribed:
        await query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. üòä")
    else:
        await query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


def get_ai_response(user_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏."""
    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            data=json.dumps({
                "model": "deepseek/deepseek-r1",
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ä—É—Å—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ. "
                                                  "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n"
                                                  "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: <–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç> \n\n"
                                                  "–ü–æ—è—Å–Ω–µ–Ω–∏—è: \n1. <–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏>\n2. <–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –æ—à–∏–±–∫–∏>"},
                    {"role": "user", "content": f"–ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {user_message}"}
                ]
            })
        )

        response_json = response.json()

        if "choices" in response_json and len(response_json["choices"]) > 0:
            return response_json["choices"][0]["message"]["content"].strip()
        else:
            return "‚ö† –û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
        return "‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API: {e}")
        return "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω)."""
    user_id = update.message.from_user.id
    is_subscribed = await check_subscription(user_id, context)

    if not is_subscribed:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/SYNTAXA1")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await update.message.reply_text(
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=keyboard,
        )
        return


    waiting_message = await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –≤—ã–ø–æ–ª–Ω—è—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    user_message = update.message.text
    bot_response = get_ai_response(user_message)

    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=waiting_message.message_id)
    await update.message.reply_text(bot_response)


async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newchat", new_chat))
    application.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="check_sub"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
